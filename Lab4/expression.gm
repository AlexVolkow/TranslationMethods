package examples.expression

start =  expr

expr : Int := term exprs(term) { exprs } ;
exprs [acc: Int] : Int
    := PLUS term { val next = acc + term } exprs(next) { exprs }
    | { acc } ;

term : Int := factor terms(factor) {terms} ;
terms [acc: Int] : Int
    := MUL factor terms({acc * factor}) {terms}
    | {acc} ;

factor : Int := single factors(single) { factors };
factors [acc: Int] : Int
    := POW single factors({ Math.pow(acc.toDouble(), single.toDouble()).toInt() }) { factors }
    | {acc};

single : Int
    := LEFT_BRACKET expr RIGHT_BRACKET { expr }
    | NUM { NUM.toInt() }
    | MINUS single { -single };

PLUS : "\+";
POW : "\*\*";
MUL : "\*";
MINUS : "-";
LEFT_BRACKET : "\(";
RIGHT_BRACKET : "\)";
NUM : "[0-9]+";

WS skip "\s+";